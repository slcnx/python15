 回顾
 	文化
 	开发环境搭建
 		多python版本, 模块隔离
 	ipython, jupyter使用


 语言发展
 	编程基础
 		程序：计算机可执行的指令
 		电子计算机：能够执行程序的机器
 		计算机科学之父：图灵
 		数字计算机之父：冯·诺伊曼，提出二进制作为数字计算机的数制基础，计算机应该按照程序顺序执行，计算机有五大部件

 	冯诺伊曼体系架构
 		CPU: 运算器、控制器
 			运算器：算术、逻辑 运算
 			控制器：控制程序执行
 		存储器：所有数据存储位置，内存
 			速度由快至慢：内存 > 外存
 		输入设备：键盘、鼠标 
 		输出设备：磁盘、显示器、打印机

 		磁盘和内存区别：掉电数据会不会丢失。
 		所有程序加载至内存原因：CPU只能寻址内存。

 		程序在CPU运算，数据在内存中，CPU中有很多的不同功能的寄存器和多级缓存
 			1级缓存与多核CPU中某核捆绑在一起，与CPU速度同样。
 			2级缓存，比1级缓存差一个数量级
 			3级缓存：CPU所有核共享
 			所以程序优化：考虑CPU寄存器和CPU缓存问题。

编程基础
	计算机语言
		人和计算机交互
	机器语言
		0和1序列，机器指令。机器指令的集合就是机器语言

	汇编语言
		用一些助记符号替代机器指令，称为汇编语言。
		例如：
			ADD A,B 将寄存器A中的数据和B中的数据相加得到的数放到寄存器A中
		汇编程序：将汇编代码转换成机器指令
		与机器语言一一对应，做起来还是比较麻烦。

语言分类
	低级语言：
		机器语言
		汇编语言：汇编程序

	高级语言：
		系统级：c, c++（编译器）
		应用级：python, java, C# ...（解释器）编译成中间代码(Bytecode)

		语言越高级：截止接近人类自然语言和数学语言
		语言越低级：越能让机器理解
		高级语言到低级语言的转换：编译器、解释器

		编译语言，源代码 --> 目标机器的CPU指令
		解释语言，解释 --> bytecode --> jvm运行 --> 机器指令

高级语言的发展
	非结构化语言
		编号、标签或GOTO，子程序可以有多个入口和出口。
		有分支、循环
		要求：编程者思维清晰
		优点：理的顺，写的代码非常小，非常优美
		缺点：不合适工业化的开发

	结构化语言
		任何基本结构只允许是唯一入口和唯一出口
		顺序、分支、循环、废弃GOTO
		优点：结构规范、大家容易理解

	面向对象
		更加接近人类认知世界的方式，万事万物抽象成对象，对象间关系抽象成“类”和“继承”。
		封装、继承、多态
		大千世界任何事物都是对象，对象可以抽象成类。
			人-->人类
			狗-->哺乳类

		缺点：并行计算领域，效率并不高。

	函数式语言
		古老的编程范式，应用在数学计算、并行处理的场景。引入到了很多现代高级语言中
		函数是“一等公民“，高阶函数



大千世界万事万物都是对象，任何对象都可以抽象成类。


程序
	算法 + 数据结构
	数据一切程序的核心
	数据结构是数据在计算机中的类型和组织方式
	算法是处理数据的方式，解决问题的方法

写程序难点
	理不清数据
	搞不清处理方法
	无法把数据设计转换成数据结构，无法把处理方法转换成算法
	无法用设计范式来进行程序设计
	世间程序皆有bug, 但是不会debug


	1、大千世界万事万物都是对象，任何对象都可以抽象成类。
	2、将想法变成数学逻辑
	3、无法把数据设计转换成数据结构，无法把处理方法转换成算法

python解释器
	cpython
	ipython
	pypy: 实时编译技术。缺点：运行期不可调整。优点：运行期可对问题优化。
	jython：编译成java字节码，跑在jvm
	ironpython: 编译成.net字节码，跑在.net平台上的解释器

